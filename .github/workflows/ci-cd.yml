name: 🧪 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Backend Tests
  backend-test:
    name: 🔧 Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: validacio_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 📋 Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: 🧪 Run tests
      run: ./mvnw test
      
    - name: 📊 Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Backend Test Results
        path: backend/target/surefire-reports/*.xml
        reporter: java-junit

  # Frontend Tests
  frontend-test:
    name: 🌐 Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
        
    steps:
    - uses: actions/checkout@v4
    
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: 📋 Install dependencies
      run: npm ci
      
    - name: 🔍 Lint check
      run: npm run lint
      
    - name: 🧪 Run tests
      run: npm run test
      
    - name: 🏗️ Build check
      run: npm run build

  # Security Scan
  security-scan:
    name: 🔐 Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📋 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Deploy (only on main branch)
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    # Backend Deploy to Fly.io
    - name: 🔧 Deploy Backend to Fly.io
      uses: superfly/flyctl-actions/setup-flyctl@master
    - run: |
        cd backend
        flyctl deploy --remote-only
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
    
    # Frontend Deploy to Vercel
    - name: 🌐 Deploy Frontend to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend
        vercel-args: '--prod'

  # Create Release (only on version tags)
  release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [backend-test, frontend-test, security-scan]
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 📝 Generate changelog
      id: changelog
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Generate changelog from commits
        CHANGELOG=$(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD)
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: 🎉 Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.changelog.outputs.version }}
        body: |
          ## Changes in ${{ steps.changelog.outputs.version }}
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## 📱 Android APK/AAB
          
          - APK disponible a: `android/app/build/outputs/apk/staging/release/`
          - AAB disponible a: `android/app/build/outputs/bundle/prodRelease/`
          
          ## 🔗 Links
          
          - [📖 Documentació](https://github.com/Susisco/VALIDACIO-FACTURES)
          - [🛡️ Sistema Seguretat](docs/seguretat/SISTEMA_SEGURETAT_COMPLETA.md)
          - [🚀 Guies Deploy](docs/desplegament/)
          
        draft: false
        prerelease: false